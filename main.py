"""
    ~~Credits~~
    made by physics1514

    Other credits:
    External UI  -  birb.yay (eevee x ui)
    ppl on the ROBLOX devforum (accessing local host through roblox) and stack overflow (remove ssl certificate to stop some errors)
"""

import webview
import os
import time
import subprocess
import socket
import re
from flask import Flask, request
from urllib.request import urlopen 
import ssl  # this part is not recommended, however it's the only fix I could find.

ssl._create_default_https_context = ssl._create_unverified_context

app = Flask(__name__)

procName = "vylara"

def getappend(filename):    # in general it should get get write lol (i got them mixed up when i made it)
    return os.path.getmtime(filename)

script_filename = "script.txt"

if not os.path.exists(script_filename): # this func i got from stackoverflow lol
    print("Creating script file...")
    with open(script_filename, "x") as script:
        pass
    print("Done.")
else:
    print("Script file already exists.")

def checkPort(port):    # TOOK ME FOREVER (retarded)
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def localHost(port):
    while checkPort(port):
        print(f"Port 3000 is already in use. Waiting...")
        time.sleep(1)
    subprocess.Popen(["python3", "-m", "http.server", str(port)])    # I only knew how to open local host using terminal so i used subprocess to emulate that ig

localHost(3000)
print("Running ui...")

def extractUrl(content):
    match = re.search(r'game:HttpGet\("([^"]+)"\)', content)
    if match:
        return match.group(1)
    return None
# found a string extractor on replit for this ^^


def execute(content):
    url = extractUrl(content)
    if url: # If it is a http:get loadstring
        print("Extracted url:", url)
        print("Getting data from url...")
        data = urlopen(url).read()
        print("Done. Encoding...")
        # i decoded it properly this time lol
        data_str = data.decode('utf-8')    # utf-8 is like the default (it works)
        print("Got data. Writing...")
        writeFile = open("script.txt", "w")
        writeFile.write(data_str)
        writeFile.close()
    else: #If its not a loadstring:
        print("Writing script set to script.txt at local host 3000...")
        writeFile = open("script.txt", "w")
        writeFile.write(content)
        writeFile.close()

# birb stuff i skidded 
def closeWindow():
    window.destroy()

def minimizeWindow():
    window.minimize()

def setStatus(text): 
    window.evaluate_js(f'document.getElementById("headerStatusLabel").textContent = "{text}"')

def main():
    global window
    new_process_name = "vylara"

    window = webview.create_window(
        new_process_name, 'index.html', width=722, height=337, frameless=True, on_top=True
    )

    window.expose(minimizeWindow, closeWindow, execute) # each function to carry over to the index.html, it can be used using the pyview api.
    webview.start()

if __name__ == "__main__":
    main()
